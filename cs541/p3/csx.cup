/**
 * Zachary May
 * Java CUP sepcification for CSX.
 **/
import java_cup.runtime.*;
import java.util.Vector;
import java.lang.StringBuffer;
import lite.scanner.*;
import lite.scanner.tokens.*;
import lite.ast.*;

parser code {:
    public void syntax_error(Symbol curSymbol)
    {
        Token curToken = (Token)curSymbol.value;
        String message = new StringBuffer("Syntax error at ")
                                  .append(curToken.linenum)
                                  .append(":")
                                  .append(curToken.colnum)
                                  .toString();
        report_error(message, null);

    }
:};

/* Terminals */
terminal Assignment      ASSIGN;
terminal CharLit         CHAR_LIT;
terminal Colon           COLON;
terminal Comma           COMMA;
terminal Divide          DIVIDE;
terminal Equals          EQUALS;
terminal GreaterEqual    GREATER_EQUAL;
terminal GreaterThan     GREATER_THAN;
terminal Identifier      IDENTIFIER;
terminal IntLit          INT_LIT;
terminal KeywordBool     K_BOOL;
terminal KeywordBreak    K_BREAK;
terminal KeywordChar     K_CHAR;
terminal KeywordClass    K_CLASS;
terminal KeywordConst    K_CONST;
terminal KeywordContinue K_CONTINUE;
terminal KeywordElse     K_ELSE;
terminal KeywordFalse    K_FALSE;
terminal KeywordIf       K_IF;
terminal KeywordInt      K_INT;
terminal KeywordPrint    K_PRINT;
terminal KeywordRead     K_READ;
terminal KeywordReturn   K_RETURN;
terminal KeywordTrue     K_TRUE;
terminal KeywordVoid     K_VOID;
terminal KeywordWhile    K_WHILE;
terminal LeftBrace       LEFT_BRACE;
terminal LeftBracket     LEFT_BRACKET;
terminal LeftParen       LEFT_PAREN;
terminal LessEqual       LESS_EQUAL;
terminal LessThan        LESS_THAN;
terminal LogicalAnd      LOGICAL_AND;
terminal LogicalNegation LOGICAL_NOT;
terminal LogicalOr       LOGICAL_OR;
terminal Minus           MINUS;
terminal NotEquals       NOT_EQUALS;
terminal Plus            PLUS;
terminal RightBrace      RIGHT_BRACE;
terminal RightBracket    RIGHT_BRACKET;
terminal RightParen      RIGHT_PAREN;
terminal Semicolon       SEMICOLON;
terminal StringLit       STRING_LIT;
terminal Times           TIMES;

/* Non-Terminals */
non terminal ProgramNode             program;
non terminal Vector                  statements;
non terminal StatementNode           statement;
non terminal ExpressionNode          expression;
non terminal ExpressionNode          term;
non terminal ExpressionNode          factor;
non terminal ExpressionNode          primary;
non terminal ExpressionNode          unary;
non terminal ExpressionNode          unit;
non terminal IdentifierNode          identifier;
non terminal Vector                  memberDeclarations;
non terminal Vector                  fieldDeclarations;
non terminal FieldDeclarationNode    fieldDeclaration;
non terminal Vector                  methodDeclarations;
non terminal MethodDeclarationNode   methodDeclaration;
non terminal Vector                  argDeclarations;
non terminal ArgumentDeclarationNode argDeclaration;
non terminal TypeNode                type;
non terminal Vector                  argList;
non terminal Vector                  printList;
non terminal Vector                  readList;
non terminal                         optionalSemi;
non terminal NameNode                name;

precedence nonassoc K_ELSE;

start with program;

program ::= K_CLASS:kc identifier:id LEFT_BRACE:l memberDeclarations:members RIGHT_BRACE:r
            {:
                Vector<MemberDeclarationNode> decls  = (Vector<MemberDeclarationNode>)members;
                RESULT = new ProgramNode(id, decls, kc.linenum, kc.colnum);
            :};

memberDeclarations ::= fieldDeclaration:field memberDeclarations:members
                       {:
                           Vector<MemberDeclarationNode> decls = (Vector<MemberDeclarationNode>)members;
                           decls.add(0, field);
                           RESULT = decls;
                       :}
                     | methodDeclarations:methods
                       {:
                           RESULT = methods;
                       :};

fieldDeclarations ::= fieldDeclaration:fd fieldDeclarations:fds
                      {:
                          Vector<FieldDeclarationNode> decls = (Vector<FieldDeclarationNode>)fds;
                          decls.add(0, fd);
                          RESULT = decls;
                      :}
                    |
                      {:
                          RESULT = new Vector<FieldDeclarationNode>();
                      :};

fieldDeclaration ::= type:t identifier:id SEMICOLON
                     {:
                         RESULT = new VariableDeclarationNode(t, id, null, t.linenum, t.colnum);
                     :}
                   | type:t identifier:id ASSIGN expression:e SEMICOLON
                     {:
                         RESULT = new VariableDeclarationNode(t, id, e, t.linenum, t.colnum);
                     :}
                   | type:t identifier:id LEFT_BRACKET INT_LIT:i RIGHT_BRACKET SEMICOLON
                     {:
                         RESULT = new ArrayDeclarationNode(t, id, i.intValue, t.linenum, t.colnum);
                     :}
                   | K_CONST:kc identifier:id ASSIGN expression:e SEMICOLON
                     {:
                         RESULT = new ConstantDeclarationNode(id, e, kc.linenum, kc.colnum);
                     :};

methodDeclarations ::= methodDeclaration:md methodDeclarations:mds
                      {:
                          Vector<MethodDeclarationNode> decls = (Vector<MethodDeclarationNode>)mds;
                          decls.add(0, md);
                          RESULT = decls;
                      :}
                     |
                       {:
                           RESULT = new Vector<MethodDeclarationNode>();
                       :};

methodDeclaration ::= K_VOID:kv identifier:id LEFT_PAREN RIGHT_PAREN LEFT_BRACE fieldDeclarations:fds statements:stmts RIGHT_BRACE optionalSemi
                      {:
                          RESULT = new MethodDeclarationNode(null, id, new Vector<ArgumentDeclarationNode>(), fds, stmts, kv.linenum, kv.colnum);
                      :}
                    | K_VOID:kv identifier:id LEFT_PAREN argDeclarations:args RIGHT_PAREN LEFT_BRACE fieldDeclarations:fds statements:stmts RIGHT_BRACE optionalSemi
                      {:
                          RESULT = new MethodDeclarationNode(null, id, args, fds, stmts, kv.linenum, kv.colnum);
                      :}
                    | type:t identifier:id LEFT_PAREN RIGHT_PAREN LEFT_BRACE fieldDeclarations:fds statements:stmts RIGHT_BRACE optionalSemi
                      {:
                          RESULT = new MethodDeclarationNode(t, id, new Vector<ArgumentDeclarationNode>(), fds, stmts, t.linenum, t.colnum);
                      :}
                    | type:t identifier:id LEFT_PAREN argDeclarations:args RIGHT_PAREN LEFT_BRACE fieldDeclarations:fds statements:stmts RIGHT_BRACE optionalSemi
                      {:
                          RESULT = new MethodDeclarationNode(t, id, args, fds, stmts, t.linenum, t.colnum);
                      :};

argDeclarations ::= argDeclaration:ad COMMA argDeclarations:ads
                    {:
                        Vector<ArgumentDeclarationNode> decls = (Vector<ArgumentDeclarationNode>)ads;
                        decls.add(0, ad);
                        RESULT = decls;
                    :}
                  | argDeclaration:ad
                    {:
                        Vector<ArgumentDeclarationNode> decls = new Vector<ArgumentDeclarationNode>();
                        decls.add(0, ad);
                        RESULT = decls;
                    :};

argDeclaration ::= type:t identifier:id
                   {:
                       RESULT = new ArgumentDeclarationNode(t, id, false, t.linenum, t.colnum);
                   :}
                 | type:t identifier:id LEFT_BRACKET RIGHT_BRACKET
                   {:
                       RESULT = new ArgumentDeclarationNode(t, id, true, t.linenum, t.colnum);
                   :};

statements ::= statement:stmt statements:stmts
               {:
                   Vector<StatementNode> statements = (Vector<StatementNode>)stmts;
                   statements.add(0, stmt);
                   RESULT = statements;
               :}
             |
               {:
                   RESULT = new Vector<StatementNode>();
               :};

statement ::= K_IF:kif LEFT_PAREN expression:expr RIGHT_PAREN statement:stmt
              {:
                  RESULT = new IfThenElseNode(expr, stmt, null, kif.linenum, kif.colnum);
              :}
            | K_IF:kif LEFT_PAREN expression:expr RIGHT_PAREN statement:thenPart K_ELSE statement:elsePart
              {:
                  RESULT = new IfThenElseNode(expr, thenPart, elsePart, kif.linenum, kif.colnum);
              :}
            | K_WHILE:kw LEFT_PAREN expression:expr RIGHT_PAREN statement:body
              {:
                  RESULT = new WhileNode(expr, body, null, kw.linenum, kw.colnum);
              :}
            | identifier:id COLON K_WHILE LEFT_PAREN expression:expr RIGHT_PAREN statement:body
              {:
                  RESULT = new WhileNode(expr, body, id, id.linenum, id.colnum);
              :}
            | identifier:id ASSIGN expression:expr SEMICOLON
              {:
                  RESULT = new AssignmentNode(id, expr, id.linenum, id.colnum);
              :}
            | K_READ:kr LEFT_PAREN readList:rl RIGHT_PAREN SEMICOLON
              {:
                  RESULT = new ReadNode(rl, kr.linenum, kr.colnum);
              :}
            | K_PRINT:kp LEFT_PAREN argList:args RIGHT_PAREN SEMICOLON
              {:
                  RESULT = new PrintNode(args, kp.linenum, kp.colnum);
              :}
            | identifier:id LEFT_PAREN RIGHT_PAREN SEMICOLON
              {:
                  Vector<ExpressionNode> args = new Vector<ExpressionNode>();
                  RESULT = new FunctionCallStatementNode(id, args, id.linenum, id.colnum);
              :}
            | identifier:id LEFT_PAREN argList:args RIGHT_PAREN SEMICOLON
              {:
                  RESULT = new FunctionCallStatementNode(id, args, id.linenum, id.colnum);
              :}
            | K_RETURN:kr SEMICOLON
              {:
                  RESULT = new ReturnNode(null, kr.linenum, kr.colnum);
              :}
            | K_RETURN:kr expression:e SEMICOLON
              {:
                  RESULT = new ReturnNode(e, kr.linenum, kr.colnum);
              :}
            | K_BREAK:kb identifier:id SEMICOLON
              {:
                  RESULT = new BreakNode(id, kb.linenum, kb.colnum);
              :}
            | K_CONTINUE:kc identifier:id SEMICOLON
              {:
                  RESULT = new ContinueNode(id, kc.linenum, kc.colnum);
              :}
            | LEFT_BRACE:lb fieldDeclarations:fields statements:stmts RIGHT_BRACE optionalSemi
              {:
                  RESULT = new CompoundStatementNode(fields, stmts, lb.linenum, lb.colnum);
              :};

argList ::= expression:expr COMMA argList:args
            {:
                Vector<ExpressionNode> arguments = (Vector<ExpressionNode>)args;
                arguments.add(0, expr);
                RESULT = arguments;
            :}
          | expression:expr
            {:
                Vector<ExpressionNode> args = new Vector<ExpressionNode>();
                args.add(0, expr);
                RESULT = args;
            :};

readList ::= name:n COMMA readList:args
             {:
                 Vector<NameNode> arguments = (Vector<NameNode>)args;
                 arguments.add(0, n);
                 RESULT = arguments;
             :}
           | name:n
             {:
                 Vector<NameNode> args = new Vector<NameNode>();
                 args.add(0, n);
                 RESULT = args;
             :};

expression ::= expression:e LOGICAL_OR term:t
               {:
                   RESULT = new LogicalOrNode(e, t, e.linenum, e.colnum);
               :}
             | expression:e LOGICAL_AND term:t
               {:
                   RESULT = new LogicalAndNode(e, t, e.linenum, e.colnum);
               :}
             | term:t
               {:
                   RESULT = t;
               :};

term ::= factor:f1 LESS_THAN factor:f2
         {:
             RESULT = new LessThanNode(f1, f2, f1.linenum, f1.colnum);
         :}
       | factor:f1 GREATER_THAN factor:f2
         {:
             RESULT = new GreaterThanNode(f1, f2, f1.linenum, f1.colnum);
         :}
       | factor:f1 LESS_EQUAL factor:f2
         {:
             RESULT = new LessEqualNode(f1, f2, f1.linenum, f1.colnum);
         :}
       | factor:f1 GREATER_EQUAL factor:f2
         {:
             RESULT = new GreaterEqualNode(f1, f2, f1.linenum, f1.colnum);
         :}
       | factor:f1 EQUALS factor:f2
         {:
             RESULT = new EqualsNode(f1, f2, f1.linenum, f1.colnum);
         :}
       | factor:f1 NOT_EQUALS factor:f2
         {:
             RESULT = new NotEqualsNode(f1, f2, f1.linenum, f1.colnum);
         :}
       | factor:f1
         {:
             RESULT = f1;
         :};

factor ::= factor:f PLUS primary:p 
           {:
               RESULT = new AdditionNode(f, p, f.linenum, f.colnum);
           :}
         | factor:f MINUS primary:p
           {:
               RESULT = new SubtractionNode(f, p, f.linenum, f.colnum);
           :}
         | primary:p
           {:
               RESULT = p;
           :};

primary ::= primary:p TIMES unary:u
            {:
                RESULT = new MultiplicationNode(p, u, p.linenum, p.colnum);
            :}
          | primary:p DIVIDE unary:u
            {:
                RESULT = new DivisionNode(p, u, p.linenum, p.colnum);
            :}
          | unary:u
            {:
                RESULT = u;
            :};

unary ::= LOGICAL_NOT:ln unary:u
          {:
              RESULT = new LogicalNotNode(u, ln.linenum, ln.colnum);
          :}
        | LEFT_PAREN:lp type:t RIGHT_PAREN unary:u
          {:
              RESULT = new CastNode(t, u, lp.linenum, lp.colnum);
          :}
        | unit:u
          {:
              RESULT = u;
          :};

unit ::= name:n
         {:
             RESULT = new NameReferenceNode(n, n.linenum, n.colnum);
         :}
       | identifier:id LEFT_PAREN RIGHT_PAREN
         {:
             Vector<ExpressionNode> args = new Vector<ExpressionNode>();
             RESULT = new FunctionCallExpressionNode(id, args, id.linenum, id.colnum);
         :}
       | identifier:id LEFT_PAREN argList:arguments RIGHT_PAREN
         {:
             Vector<ExpressionNode> args = (Vector<ExpressionNode>)arguments;
             RESULT = new FunctionCallExpressionNode(id, args, id.linenum, id.colnum);
         :}
       | INT_LIT:i
         {:
             RESULT = new IntLiteralNode(i.intValue, i.linenum, i.colnum);
         :}
       | CHAR_LIT:c
         {:
             RESULT = new CharLiteralNode(c.charValue, c.linenum, c.colnum);
         :}
       | STRING_LIT:s
         {:
             RESULT = new StringLiteralNode(s.stringValue, s.linenum, s.colnum);
         :}
       | K_TRUE:kt
         {:
             RESULT = new TrueNode(kt.linenum, kt.colnum);
         :}
       | K_FALSE:kf
         {:
             RESULT = new FalseNode(kf.linenum, kf.colnum);
         :}
       | LEFT_PAREN:lp expression:e RIGHT_PAREN
         {:
             RESULT = e;
         :};

type ::= K_INT:ki  {: RESULT = new IntTypeNode(ki.linenum, ki.colnum);  :}
       | K_CHAR:kc {: RESULT = new CharTypeNode(kc.linenum, kc.colnum); :}
       | K_BOOL:kb {: RESULT = new BoolTypeNode(kb.linenum, kb.colnum); :};

identifier ::= IDENTIFIER:id
               {:
                   RESULT = new IdentifierNode(id.identifierText, id.linenum, id.colnum);
               :};

name ::= identifier:id
         {:
             RESULT = new NameNode(id, null, id.linenum, id.colnum);
         :}
       | identifier:id LEFT_BRACKET expression:e RIGHT_BRACKET
         {:
             RESULT = new NameNode(id, e, id.linenum, id.colnum);
         :};

optionalSemi ::= SEMICOLON | ;
