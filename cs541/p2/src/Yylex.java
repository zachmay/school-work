/* The following code was generated by JFlex 1.4.3 on 2/5/13 8:43 PM */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/5/13 8:43 PM from the specification file
 * <tt>csx.jlex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\55\1\54\2\0\1\60\22\0\1\61\1\22\1\56\1\57"+
    "\2\0\1\23\1\52\1\11\1\12\1\17\1\15\1\33\1\16\1\0"+
    "\1\20\12\1\1\31\1\32\1\25\1\21\1\26\2\0\1\35\1\37"+
    "\1\34\1\3\1\7\1\45\1\2\1\42\1\4\1\2\1\41\1\6"+
    "\1\2\1\43\1\40\1\50\1\2\1\10\1\36\1\5\1\44\1\46"+
    "\1\47\3\2\1\13\1\53\1\14\3\0\1\35\1\37\1\34\1\3"+
    "\1\7\1\45\1\2\1\42\1\4\1\2\1\41\1\6\1\2\1\43"+
    "\1\40\1\50\1\2\1\10\1\36\1\5\1\44\1\46\1\47\3\2"+
    "\1\27\1\24\1\30\1\51\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\5\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\2\1\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\6\3\2\1"+
    "\1\25\1\26\2\1\1\25\1\27\1\3\1\30\3\3"+
    "\1\0\1\31\1\32\1\33\1\34\1\35\1\36\10\3"+
    "\3\0\1\37\1\0\3\3\1\40\7\3\1\41\1\37"+
    "\1\0\4\3\1\42\1\3\1\43\1\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[88];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\62\0\62\0\62\0\62\0\62\0\62\0\62\0\u0190"+
    "\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\62\0\62"+
    "\0\62\0\62\0\62\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6"+
    "\0\u03e8\0\144\0\u041a\0\62\0\62\0\u044c\0\u047e\0\u04b0"+
    "\0\62\0\u04e2\0\226\0\u0514\0\u0546\0\u0578\0\u05aa\0\62"+
    "\0\62\0\62\0\62\0\62\0\62\0\u05dc\0\u060e\0\u0640"+
    "\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u044c\0\u079e"+
    "\0\62\0\u07d0\0\u0802\0\u0834\0\u0866\0\u05aa\0\u0898\0\u08ca"+
    "\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\62\0\u044c\0\u09f6"+
    "\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\62\0\u0af0\0\226\0\u0b22";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[88];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\4\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\2\4\1\35\5\4\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\2\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\63\0\1\3\61\0\10\4"+
    "\23\0\15\4\12\0\10\4\23\0\7\4\1\52\1\4"+
    "\1\53\3\4\12\0\7\4\1\54\23\0\15\4\12\0"+
    "\5\4\1\55\2\4\23\0\15\4\12\0\6\4\1\56"+
    "\1\4\23\0\15\4\31\0\1\57\62\0\1\60\61\0"+
    "\1\61\63\0\1\62\62\0\1\63\56\0\1\64\61\0"+
    "\1\65\41\0\5\4\1\66\2\4\23\0\4\4\1\67"+
    "\1\4\1\70\6\4\12\0\7\4\1\71\23\0\4\4"+
    "\1\72\10\4\12\0\10\4\23\0\1\4\1\7\13\4"+
    "\12\0\10\4\23\0\4\4\1\73\10\4\12\0\10\4"+
    "\23\0\6\4\1\74\6\4\12\0\7\4\1\75\23\0"+
    "\15\4\11\0\62\76\53\77\1\100\2\77\1\101\3\77"+
    "\57\0\1\102\56\0\1\44\6\0\4\4\1\53\3\4"+
    "\23\0\15\4\12\0\10\4\23\0\10\4\1\103\4\4"+
    "\12\0\10\4\23\0\2\4\1\103\12\4\12\0\4\4"+
    "\1\104\3\4\23\0\1\4\1\105\13\4\11\0\54\106"+
    "\1\0\5\106\1\0\10\4\23\0\1\4\1\107\13\4"+
    "\12\0\10\4\23\0\7\4\1\110\5\4\12\0\10\4"+
    "\23\0\1\4\1\111\13\4\12\0\6\4\1\112\1\4"+
    "\23\0\15\4\12\0\10\4\23\0\4\4\1\113\10\4"+
    "\12\0\3\4\1\105\4\4\23\0\15\4\12\0\3\4"+
    "\1\114\4\4\23\0\15\4\12\0\3\4\1\115\4\4"+
    "\23\0\15\4\63\0\1\116\7\0\53\77\1\100\2\77"+
    "\1\117\3\77\57\102\1\120\2\102\1\0\6\4\1\53"+
    "\1\4\23\0\15\4\12\0\10\4\23\0\10\4\1\121"+
    "\4\4\12\0\2\4\1\53\5\4\23\0\15\4\12\0"+
    "\10\4\23\0\2\4\1\122\12\4\12\0\4\4\1\123"+
    "\3\4\23\0\2\4\1\52\12\4\12\0\7\4\1\53"+
    "\23\0\15\4\12\0\10\4\23\0\1\4\1\124\13\4"+
    "\12\0\5\4\1\53\2\4\23\0\15\4\12\0\5\4"+
    "\1\103\2\4\23\0\15\4\12\0\10\4\23\0\7\4"+
    "\1\52\5\4\11\0\57\102\1\125\2\102\1\0\7\4"+
    "\1\126\23\0\15\4\12\0\10\4\23\0\2\4\1\127"+
    "\12\4\12\0\3\4\1\130\4\4\23\0\15\4\12\0"+
    "\10\4\23\0\5\4\1\53\7\4\12\0\10\4\23\0"+
    "\7\4\1\53\5\4\12\0\10\4\23\0\7\4\1\54"+
    "\5\4\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2900];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\7\11\7\1\5\11\10\1\2\11"+
    "\3\1\1\11\5\1\1\0\6\11\10\1\3\0\1\11"+
    "\1\0\13\1\1\11\1\1\1\0\4\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[88];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 34: 
          { String comment = yytext();
    Pos.setpos();
    
    // Count newlines. Convert \r or \r\n to \n to normalize
    // newlines for counting.
    int newlineCount = 0;
    String fixedComment = comment.replace("\r\n", "\n")
                                 .replace("\r", "\n");
    int length = fixedComment.length();
    for ( int i = 0; i < length; i++ ) {
        if ( fixedComment.charAt(i) == '\n' ) {
            newlineCount++;
        }
    }

    // Update position. Advance line number by the newline count,
    // Set new column count to the number of characters after the
    // last newline in the token.
    Pos.line += newlineCount;
    Pos.col = fixedComment.length() - fixedComment.lastIndexOf('\n');
          }
        case 36: break;
        case 27: 
          { Pos.setpos();
	Pos.col += 2;
	return Symbol.create(SymbolTypes.CAND);
          }
        case 37: break;
        case 8: 
          { Pos.setpos();
	Pos.col += 1;
    return Symbol.create(SymbolTypes.PLUS);
          }
        case 38: break;
        case 7: 
          { Pos.setpos();
	Pos.col += 1;
    return Symbol.create(SymbolTypes.RBRACKET);
          }
        case 39: break;
        case 6: 
          { Pos.setpos();
	Pos.col += 1;
    return Symbol.create(SymbolTypes.LBRACKET);
          }
        case 40: break;
        case 32: 
          { Pos.setpos();
    Pos.line += 1;
    Pos.col = 1;
          }
        case 41: break;
        case 24: 
          { int symbolType = SymbolTypes.error;
    String symbolText = yytext().toLowerCase();
    Pos.setpos();
    Pos.col += yytext().length();
    return Symbol.create(SymbolTypes.stringToReservedWordType(symbolText));
          }
        case 42: break;
        case 35: 
          { Pos.setpos();
    Pos.col += yytext().length();
    return Symbol.create(SymbolTypes.rw_CLASS);
          }
        case 43: break;
        case 23: 
          { Pos.setpos();
	Pos.col += 1;
          }
        case 44: break;
        case 4: 
          { Pos.setpos();
	Pos.col += 1;
    return Symbol.create(SymbolTypes.LPAREN);
          }
        case 45: break;
        case 33: 
          { String charValue = yytext();
    int length = charValue.length();

    Pos.setpos();
    Pos.col += length;

    String cleaned = charValue.substring(0, length - 1)
                              .substring(1);

    // TODO: Test this, seems off.
    return Symbol.createCharLiteral(cleaned.charAt(0));
          }
        case 46: break;
        case 14: 
          { Pos.setpos();
	Pos.col += 1;
	return Symbol.create(SymbolTypes.LT);
          }
        case 47: break;
        case 17: 
          { Pos.setpos();
	Pos.col += 1;
	return Symbol.create(SymbolTypes.RBRACE);
          }
        case 48: break;
        case 30: 
          { Pos.setpos();
	Pos.col += 1;
	return Symbol.create(SymbolTypes.GEQ);
          }
        case 49: break;
        case 25: 
          { Pos.setpos();
    Pos.col += 2;
    return Symbol.create(SymbolTypes.EQ);
          }
        case 50: break;
        case 21: 
          { Pos.setpos();
	Pos.line += 1;
	Pos.col = 1;
          }
        case 51: break;
        case 29: 
          { Pos.setpos();
	Pos.col += 1;
	return Symbol.create(SymbolTypes.LEQ);
          }
        case 52: break;
        case 18: 
          { Pos.setpos();
	Pos.col += 1;
    return Symbol.create(SymbolTypes.COLON);
          }
        case 53: break;
        case 15: 
          { Pos.setpos();
	Pos.col += 1;
	return Symbol.create(SymbolTypes.GT);
          }
        case 54: break;
        case 13: 
          { Pos.setpos();
    Pos.col += 1;
    return Symbol.create(SymbolTypes.NOT);
          }
        case 55: break;
        case 22: 
          { Pos.setpos();
    Pos.col += 1;
          }
        case 56: break;
        case 20: 
          { Pos.setpos();
	Pos.col += 1;
    return Symbol.create(SymbolTypes.COMMA);
          }
        case 57: break;
        case 28: 
          { Pos.setpos();
	Pos.col += 2;
	return Symbol.create(SymbolTypes.COR);
          }
        case 58: break;
        case 1: 
          { return Symbol.createError("<<Unknown token>>");
          }
        case 59: break;
        case 2: 
          { // TODO: Check for overflow
    String literal = yytext();
	Pos.setpos();
    Pos.col += literal.length();

    int sign = literal.charAt(0) == '~' ? -1 : 1;
    if ( sign == -1 ) {
        literal = literal.substring(1);
    } 
    
    int literalValue;
    try {
        literalValue = sign * Integer.parseInt(literal);
    } catch ( NumberFormatException e ) {
        return Symbol.createError("Integer overflow " + yytext());
    }

    return Symbol.createIntegerLiteral(literalValue);
          }
        case 60: break;
        case 5: 
          { Pos.setpos();
	Pos.col += 1;
    return Symbol.create(SymbolTypes.RPAREN);
          }
        case 61: break;
        case 16: 
          { Pos.setpos();
	Pos.col += 1;
	return Symbol.create(SymbolTypes.LBRACE);
          }
        case 62: break;
        case 19: 
          { Pos.setpos();
	Pos.col +=1;
    return Symbol.create(SymbolTypes.SEMI);
          }
        case 63: break;
        case 26: 
          { Pos.setpos();
	Pos.col += 2;
	return Symbol.create(SymbolTypes.NOTEQ);
          }
        case 64: break;
        case 31: 
          { String stringValue = yytext();
    int length = stringValue.length();

    Pos.setpos();
    Pos.col += length;

    return Symbol.createStringLiteral(stringValue);
          }
        case 65: break;
        case 12: 
          { Pos.setpos();
    Pos.col += 1;
    return Symbol.create(SymbolTypes.ASG);
          }
        case 66: break;
        case 9: 
          { Pos.setpos();
	Pos.col += 1;
    return Symbol.create(SymbolTypes.MINUS);
          }
        case 67: break;
        case 10: 
          { Pos.setpos();
	Pos.col += 1;
    return Symbol.create(SymbolTypes.TIMES);
          }
        case 68: break;
        case 11: 
          { Pos.setpos();
	Pos.col += 1;
    return Symbol.create(SymbolTypes.SLASH);
          }
        case 69: break;
        case 3: 
          { Pos.setpos();
    Pos.col += yytext().length();
    return Symbol.createIdentifier(yytext());
          }
        case 70: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   return Symbol.create(SymbolTypes.EOF, 0, 0);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
