
//----------------------------------------------------
// The following code was generated by CUP v0.9e
// Fri Sep 12 14:15:48 CDT 1997
//----------------------------------------------------

/** Cup generated class containing symbol constants. */
public class SymbolTypes {
    /* terminals */
    static final int ASG = 6;
    static final int CAND = 15;
    static final int CHARLIT = 9;
    static final int COLON = 52;
    static final int COMMA = 3;
    static final int COR = 16;
    static final int EOF = 0;
    static final int EQ = 19;
    static final int GEQ = 22;
    static final int GT = 18;
    static final int IDENTIFIER = 10;
    static final int INTLIT = 7;
    static final int LBRACE = 11;
    static final int LBRACKET = 13;
    static final int LEQ = 21;
    static final int LPAREN = 4;
    static final int LT = 17;
    static final int MINUS = 24;
    static final int NOT = 27;
    static final int NOTEQ = 20;
    static final int PLUS = 23;
    static final int RBRACE = 12;
    static final int RBRACKET = 14;
    static final int RPAREN = 5;
    static final int SEMI = 2;
    static final int SLASH = 26;
    static final int STRLIT = 8;
    static final int TIMES = 25;
    static final int error = 1;
    static final int rw_BOOL = 36;
    static final int rw_BREAK = 50;
    static final int rw_CHAR = 35;
    static final int rw_CLASS = 28;
    static final int rw_CONST = 29;
    static final int rw_CONTINUE = 51;
    static final int rw_ELSE = 32;
    static final int rw_FALSE = 40;
    static final int rw_IF = 30;
    static final int rw_INT = 34;
    static final int rw_PRINT = 101;
    static final int rw_READ = 33;
    static final int rw_RETURN = 38;
    static final int rw_TRUE = 39;
    static final int rw_VOID = 100;
    static final int rw_WHILE = 31;
    static final int rw_WRITE = 37;

    public static final String describe(int symbolType) {
        switch ( symbolType ) {
            case ASG:
                return "=";
            case CAND:
                return "&&";
            case CHARLIT:
                return "Character Literal";
            case COLON:
                return ":";
            case COMMA:
                return ",";
            case COR:
                return "||";
            case EOF:
                return "EOF";
            case EQ:
                return "==";
            case GEQ:
                return ">=";
            case GT:
                return ">";
            case IDENTIFIER:
                return "Identifier";
            case INTLIT:
                return "Integer Literal";
            case LBRACE:
                return "{";
            case LBRACKET:
                return "[";
            case LEQ:
                return "<=";
            case LPAREN:
                return "(";
            case LT:
                return "<";
            case MINUS:
                return "-";
            case NOT:
                return "!";
            case NOTEQ:
                return "!=";
            case PLUS:
                return "+";
            case RBRACE:
                return "}";
            case RBRACKET:
                return "[";
            case RPAREN:
                return ")";
            case SEMI:
                return ";";
            case SLASH:
                return "/";
            case STRLIT:
                return "String Literal";
            case TIMES:
                return "*";
            case error:
                return "-ERROR-";
            case rw_BOOL:
                return "BOOL";
            case rw_BREAK:
                return "BREAK";
            case rw_CHAR:
                return "CHAR";
            case rw_CLASS:
                return "CLASS";
            case rw_CONST:
                return "CONST";
            case rw_CONTINUE:
                return "CONTINUE";
            case rw_ELSE:
                return "ELSE";
            case rw_FALSE:
                return "FALSE";
            case rw_IF:
                return "IF";
            case rw_INT:
                return "INT";
            case rw_PRINT:
                return "PRINT";
            case rw_READ:
                return "READ";
            case rw_RETURN:
                return "RETURN";
            case rw_TRUE:
                return "TRUE";
            case rw_VOID:
                return "VOID";
            case rw_WHILE:
                return "WHILE";
            case rw_WRITE:
                return "WRITE";
            default:
                throw new IllegalArgumentException("Unknown token type.");
        } // Switch symbolType
    } // describe()

    public static int stringToReservedWordType(String s) {
        String normalized = s.toLowerCase();
        if ( normalized.equals("bool") ) {
            return rw_BOOL;
        }
        else if ( normalized.equals("break") ) {
            return rw_BREAK;
        }
        else if ( normalized.equals("char") ) {
            return rw_CHAR;
        }
        else if ( normalized.equals("class") ) {
            return rw_CLASS;
        }
        else if ( normalized.equals("const") ) {
            return rw_CONST;
        }
        else if ( normalized.equals("continue") ) {
            return rw_CONTINUE;
        }
        else if ( normalized.equals("else") ) {
            return rw_ELSE;
        }
        else if ( normalized.equals("false") ) {
            return rw_FALSE;
        }
        else if ( normalized.equals("if") ) {
            return rw_IF;
        }
        else if ( normalized.equals("int") ) {
            return rw_INT;
        }
        else if ( normalized.equals("print") ) {
            return rw_PRINT;
        }
        else if ( normalized.equals("read") ) {
            return rw_READ;
        }
        else if ( normalized.equals("return") ) {
            return rw_RETURN;
        }
        else if ( normalized.equals("true") ) {
            return rw_TRUE;
        }
        else if ( normalized.equals("void") ) {
            return rw_VOID;
        }
        else if ( normalized.equals("while") ) {
            return rw_WHILE;
        }
        else if ( normalized.equals("write") ) {
            return rw_WRITE;
        }
        else {
            throw new IllegalArgumentException("Unknown reserved word: " + normalized);
        }
    }
} // SymbolTypes

