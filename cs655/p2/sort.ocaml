let rec take n list =
    match list with []          -> []
                  | (x :: rest) -> match n with 0 -> []
                                              | n -> x :: (take (n - 1) rest)

let rec drop n list =
    match list with [] -> []
                  | (x :: rest) -> match n with 0 -> (x :: rest)
                                              | n -> drop (n - 1) rest

let split list = 
    (* Finding the midpoint to split at uses integer division. *)
    let takeLength = (List.length list) / 2 in
        (take takeLength list, drop takeLength list)

let rec mergeSort theList =
    match theList with []        -> []
                     | [x]       -> [x]
                     | otherwise -> let left, right = split theList in
                                        List.merge compare (mergeSort left) (mergeSort right)

(* INSERTION SORT *)

let rec insert x list = 
    match list with []                     -> [x]
                  | (y :: rest) when x < y -> x :: list
                  | (y :: rest)            -> y :: (insert x rest)

let rec insertionSort' sorted unsorted = 
    match unsorted with []          -> sorted
                      | (x :: rest) -> insertionSort' (insert x sorted) rest

let insertionSort list = insertionSort' [] list
   
(* HEAP SORT *)

type 'a heap = { storage: 'a array, lastIndex: int }

heapInsert heap x = heapInsert' heap x 0
heapInsert' heap x i = 
